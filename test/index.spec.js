import LineDeco from '../src/index'
import assert from 'assert'

describe('LineDeco', () => {
  let ld

  beforeEach(() => {
    ld = new LineDeco()
  })

  describe('text2deco()', () => {
    // 正常系
    it('アルファベット(大文字)が正しく変換されること:ALPHA1', () => {
      assert(ld.text2deco('ABCDEFGHIJKLMNOPQRSTUVWXYZ', { alphaType: 'ALPHA1' }) === '􂘁􀄁􏿿􂘁􀄂􏿿􂘁􀄃􏿿􂘁􀄄􏿿􂘁􀄅􏿿􂘁􀄆􏿿􂘁􀄇􏿿􂘁􀄈􏿿􂘁􀄉􏿿􂘁􀄊􏿿􂘁􀄋􏿿􂘁􀄌􏿿􂘁􀄍􏿿􂘁􀄎􏿿􂘁􀄏􏿿􂘁􀄐􏿿􂘁􀄑􏿿􂘁􀄒􏿿􂘁􀄓􏿿􂘁􀄔􏿿􂘁􀄕􏿿􂘁􀄖􏿿􂘁􀄗􏿿􂘁􀄘􏿿􂘁􀄙􏿿􂘁􀄚􏿿')
    })

    it('アルファベット(小文字)が正しく変換されること:ALPHA1', () => {
      assert(ld.text2deco('abcdefghijklmnopqrstuvwxyz', { alphaType: 'ALPHA1' }) === '􂘁􀄛􏿿􂘁􀄜􏿿􂘁􀄝􏿿􂘁􀄞􏿿􂘁􀄟􏿿􂘁􀄠􏿿􂘁􀄡􏿿􂘁􀄢􏿿􂘁􀄣􏿿􂘁􀄤􏿿􂘁􀄥􏿿􂘁􀄦􏿿􂘁􀄧􏿿􂘁􀄨􏿿􂘁􀄩􏿿􂘁􀄪􏿿􂘁􀄫􏿿􂘁􀄬􏿿􂘁􀄭􏿿􂘁􀄮􏿿􂘁􀄯􏿿􂘁􀄰􏿿􂘁􀄱􏿿􂘁􀄲􏿿􂘁􀄳􏿿􂘁􀄴􏿿')
    })

    it('記号(全角)が正しく変換されること:ALPHA1', () => {
      assert(ld.text2deco('〜！＠＃＄％＾＆＊（）＋＝【】｛｝｜；’：，．／＜＞？＿−￥・', { alphaType: 'ALPHA1' }) === '􂘁􀄿􏿿􂘁􀅃􏿿􂘁􀅄􏿿􂘁􀅅􏿿􂘁􀅆􏿿􂘁􀅇􏿿􂘁􀅈􏿿􂘁􀅊􏿿􂘁􀅌􏿿􂘁􀅍􏿿􂘁􀅎􏿿􂘁􀅏􏿿􂘁􀅑􏿿􂘁􀅒􏿿􂘁􀅓􏿿􂘁􀅗􏿿􂘁􀅘􏿿􂘁􀅙􏿿􂘁􀅚􏿿􂘁􀅛􏿿􂘁􀅜􏿿􂘁􀅝􏿿􂘁􀅞􏿿􂘁􀅟􏿿􂘁􀅠􏿿􂘁􀅡􏿿􂘁􀅤􏿿􂘁􀅥􏿿􂘁􀅧􏿿􂘁􀅨􏿿􂘁􀅫􏿿')
    })

    it('記号(半角)が正しく変換されること:ALPHA1', () => {
      assert(ld.text2deco('~!@#$%^&*()+=[]{}|;\':,./<>?_-', { alphaType: 'ALPHA1' }) === '􂘁􀄿􏿿􂘁􀅃􏿿􂘁􀅄􏿿􂘁􀅅􏿿􂘁􀅆􏿿􂘁􀅇􏿿􂘁􀅈􏿿􂘁􀅊􏿿􂘁􀅌􏿿􂘁􀅍􏿿􂘁􀅎􏿿􂘁􀅏􏿿􂘁􀅑􏿿􂘁􀅒􏿿􂘁􀅓􏿿􂘁􀅗􏿿􂘁􀅘􏿿􂘁􀅙􏿿􂘁􀅚􏿿􂘁􀅛􏿿􂘁􀅜􏿿􂘁􀅝􏿿􂘁􀅞􏿿􂘁􀅟􏿿􂘁􀅠􏿿􂘁􀅡􏿿􂘁􀅤􏿿􂘁􀅥􏿿􂘁􀅧􏿿')
    })

    it('ひらがなが正しく変換されること:KANA1', () => {
      assert(ld.text2deco('あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをんぁぃぅぇぉっゃゅょがぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽ', { kanaType: 'KANA1' }) === '􂨁􀄁􏿿􂨁􀄂􏿿􂨁􀄃􏿿􂨁􀄄􏿿􂨁􀄅􏿿􂨁􀄆􏿿􂨁􀄇􏿿􂨁􀄈􏿿􂨁􀄉􏿿􂨁􀄊􏿿􂨁􀄋􏿿􂨁􀄌􏿿􂨁􀄍􏿿􂨁􀄎􏿿􂨁􀄏􏿿􂨁􀄐􏿿􂨁􀄑􏿿􂨁􀄒􏿿􂨁􀄓􏿿􂨁􀄔􏿿􂨁􀄕􏿿􂨁􀄖􏿿􂨁􀄗􏿿􂨁􀄘􏿿􂨁􀄙􏿿􂨁􀄚􏿿􂨁􀄛􏿿􂨁􀄜􏿿􂨁􀄝􏿿􂨁􀄞􏿿􂨁􀄟􏿿􂨁􀄠􏿿􂨁􀄡􏿿􂨁􀄢􏿿􂨁􀄣􏿿􂨁􀄤􏿿􂨁􀄥􏿿􂨁􀄦􏿿􂨁􀄧􏿿􂨁􀄨􏿿􂨁􀄩􏿿􂨁􀄪􏿿􂨁􀄫􏿿􂨁􀄬􏿿􂨁􀄭􏿿􂨁􀄮􏿿􂨁􀄯􏿿􂨁􀄰􏿿􂨁􀄱􏿿􂨁􀄲􏿿􂨁􀄳􏿿􂨁􀄴􏿿􂨁􀄵􏿿􂨁􀄶􏿿􂨁􀄷􏿿􂨁􀄸􏿿􂨁􀄹􏿿􂨁􀄺􏿿􂨁􀄻􏿿􂨁􀄼􏿿􂨁􀄽􏿿􂨁􀄾􏿿􂨁􀄿􏿿􂨁􀅀􏿿􂨁􀅁􏿿􂨁􀅂􏿿􂨁􀅃􏿿􂨁􀅄􏿿􂨁􀅅􏿿􂨁􀅆􏿿􂨁􀅇􏿿􂨁􀅈􏿿􂨁􀅉􏿿􂨁􀅊􏿿􂨁􀅋􏿿􂨁􀅌􏿿􂨁􀅍􏿿􂨁􀅎􏿿􂨁􀅏􏿿􂨁􀅐􏿿')
    })

    it('カタカナが正しく変換されること:KANA1', () => {
      assert(ld.text2deco('アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォッャュョガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポ', { kanaType: 'KANA1' }) === '􂨁􀅑􏿿􂨁􀅒􏿿􂨁􀅓􏿿􂨁􀅔􏿿􂨁􀅕􏿿􂨁􀅖􏿿􂨁􀅗􏿿􂨁􀅘􏿿􂨁􀅙􏿿􂨁􀅚􏿿􂨁􀅛􏿿􂨁􀅜􏿿􂨁􀅝􏿿􂨁􀅞􏿿􂨁􀅟􏿿􂨁􀅠􏿿􂨁􀅡􏿿􂨁􀅢􏿿􂨁􀅣􏿿􂨁􀅤􏿿􂨁􀅥􏿿􂨁􀅦􏿿􂨁􀅧􏿿􂨁􀅨􏿿􂨁􀅩􏿿􂨁􀅪􏿿􂨁􀅫􏿿􂨁􀅬􏿿􂨁􀅭􏿿􂨁􀅮􏿿􂨁􀅯􏿿􂨁􀅰􏿿􂨁􀅱􏿿􂨁􀅲􏿿􂨁􀅳􏿿􂨁􀅴􏿿􂨁􀅵􏿿􂨁􀅶􏿿􂨁􀅷􏿿􂨁􀅸􏿿􂨁􀅹􏿿􂨁􀅺􏿿􂨁􀅻􏿿􂨁􀅼􏿿􂨁􀅽􏿿􂨁􀅾􏿿􂨁􀅿􏿿􂨁􀆀􏿿􂨁􀆁􏿿􂨁􀆂􏿿􂨁􀆃􏿿􂨁􀆄􏿿􂨁􀆅􏿿􂨁􀆆􏿿􂨁􀆇􏿿􂨁􀆈􏿿􂨁􀆉􏿿􂨁􀆊􏿿􂨁􀆋􏿿􂨁􀆌􏿿􂨁􀆍􏿿􂨁􀆎􏿿􂨁􀆏􏿿􂨁􀆐􏿿􂨁􀆑􏿿􂨁􀆒􏿿􂨁􀆓􏿿􂨁􀆔􏿿􂨁􀆕􏿿􂨁􀆖􏿿􂨁􀆗􏿿􂨁􀆘􏿿􂨁􀆙􏿿􂨁􀆚􏿿􂨁􀆛􏿿􂨁􀆜􏿿􂨁􀆝􏿿􂨁􀆞􏿿􂨁􀆟􏿿􂨁􀆠􏿿')
    })

    it('記号が正しく変換されること:KANA1', () => {
      assert(ld.text2deco('ー', { kanaType: 'KANA1' }) === '􂨁􀆡􏿿')
    })

    it('コードマップに存在しない文字が変換されないこと', () => {
      assert(ld.text2deco('漢字😆') === '漢字😆')
    })

    it('コードマップに存在する文字・存在しない文字が混合しても正しく変換されること', () => {
      assert(ld.text2deco('A😆\r\nあ¥') === '􂘁􀄁􏿿😆\r\n􂨁􀄁􏿿¥')
    })

    it('空文字でも異常終了しないこと', () => {
      assert(ld.text2deco('') === '')
    })

    it('ALPHA1で正しく変換されること', () => {
      assert(ld.text2deco('A', { alphaType: 'ALPHA1' }) === '􂘁􀄁􏿿')
    })

    it('ALPHA2で正しく変換されること', () => {
      assert(ld.text2deco('A', { alphaType: 'ALPHA2' }) === '􂜁􀄁􏿿')
    })

    it('ALPHA3で正しく変換されること', () => {
      assert(ld.text2deco('A', { alphaType: 'ALPHA3' }) === '􂠁􀄁􏿿')
    })

    it('ALPHA4で正しく変換されること', () => {
      assert(ld.text2deco('A', { alphaType: 'ALPHA4' }) === '􂤁􀄁􏿿')
    })

    it('KANA1で正しく変換されること', () => {
      assert(ld.text2deco('あ', { kanaType: 'KANA1' }) === '􂨁􀄁􏿿')
    })

    it('KANA2で正しく変換されること', () => {
      assert(ld.text2deco('あ', { kanaType: 'KANA2' }) === '􂰁􀄁􏿿')
    })

    it('KANA3で正しく変換されること', () => {
      assert(ld.text2deco('あ', { kanaType: 'KANA3' }) === '􂬁􀄁􏿿')
    })

    it('KANA4で正しく変換されること', () => {
      assert(ld.text2deco('あ', { kanaType: 'KANA4' }) === '􂴁􀄁􏿿')
    })

    // 異常系
    it('存在しない文字タイプを指定されたとき、エラーが表示されること:ALPHA', () => {
      assert.throws(() => ld.text2deco('A', { alphaType: 'ALPHA5' }), Error)
    })

    it('存在しない文字タイプを指定されたとき、エラーが表示されること:KANA', () => {
      assert.throws(() => ld.text2deco('あ', { kanaType: 'KANA5' }), Error)
    })
  })

  describe('deco2text()', () => {
    it('アルファベット(大文字)が正しく変換されること', () => {
      assert(ld.deco2text('􂘁􀄁􏿿􂘁􀄂􏿿􂘁􀄃􏿿􂘁􀄄􏿿􂘁􀄅􏿿􂘁􀄆􏿿􂘁􀄇􏿿􂘁􀄈􏿿􂘁􀄉􏿿􂘁􀄊􏿿􂘁􀄋􏿿􂘁􀄌􏿿􂘁􀄍􏿿􂘁􀄎􏿿􂘁􀄏􏿿􂘁􀄐􏿿􂘁􀄑􏿿􂘁􀄒􏿿􂘁􀄓􏿿􂘁􀄔􏿿􂘁􀄕􏿿􂘁􀄖􏿿􂘁􀄗􏿿􂘁􀄘􏿿􂘁􀄙􏿿􂘁􀄚􏿿') === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')
    })

    it('アルファベット(小文字)が正しく変換されること', () => {
      assert(ld.deco2text('􂘁􀄛􏿿􂘁􀄜􏿿􂘁􀄝􏿿􂘁􀄞􏿿􂘁􀄟􏿿􂘁􀄠􏿿􂘁􀄡􏿿􂘁􀄢􏿿􂘁􀄣􏿿􂘁􀄤􏿿􂘁􀄥􏿿􂘁􀄦􏿿􂘁􀄧􏿿􂘁􀄨􏿿􂘁􀄩􏿿􂘁􀄪􏿿􂘁􀄫􏿿􂘁􀄬􏿿􂘁􀄭􏿿􂘁􀄮􏿿􂘁􀄯􏿿􂘁􀄰􏿿􂘁􀄱􏿿􂘁􀄲􏿿􂘁􀄳􏿿􂘁􀄴􏿿') === 'abcdefghijklmnopqrstuvwxyz')
    })

    it('記号が正しく変換されること', () => {
      assert(ld.deco2text('􂘁􀄿􏿿􂘁􀅃􏿿􂘁􀅄􏿿􂘁􀅅􏿿􂘁􀅆􏿿􂘁􀅇􏿿􂘁􀅈􏿿􂘁􀅊􏿿􂘁􀅌􏿿􂘁􀅍􏿿􂘁􀅎􏿿􂘁􀅏􏿿􂘁􀅑􏿿􂘁􀅒􏿿􂘁􀅓􏿿􂘁􀅗􏿿􂘁􀅘􏿿􂘁􀅙􏿿􂘁􀅚􏿿􂘁􀅛􏿿􂘁􀅜􏿿􂘁􀅝􏿿􂘁􀅞􏿿􂘁􀅟􏿿􂘁􀅠􏿿􂘁􀅡􏿿􂘁􀅤􏿿􂘁􀅥􏿿􂘁􀅧􏿿􂘁􀅨􏿿􂘁􀅫􏿿') === '〜！＠＃＄％＾＆＊（）＋＝【】｛｝｜；’：，．／＜＞？＿−￥・')
    })

    it('ひらがなが正しく変換されること', () => {
      assert(ld.deco2text('􂨁􀄁􏿿􂨁􀄂􏿿􂨁􀄃􏿿􂨁􀄄􏿿􂨁􀄅􏿿􂨁􀄆􏿿􂨁􀄇􏿿􂨁􀄈􏿿􂨁􀄉􏿿􂨁􀄊􏿿􂨁􀄋􏿿􂨁􀄌􏿿􂨁􀄍􏿿􂨁􀄎􏿿􂨁􀄏􏿿􂨁􀄐􏿿􂨁􀄑􏿿􂨁􀄒􏿿􂨁􀄓􏿿􂨁􀄔􏿿􂨁􀄕􏿿􂨁􀄖􏿿􂨁􀄗􏿿􂨁􀄘􏿿􂨁􀄙􏿿􂨁􀄚􏿿􂨁􀄛􏿿􂨁􀄜􏿿􂨁􀄝􏿿􂨁􀄞􏿿􂨁􀄟􏿿􂨁􀄠􏿿􂨁􀄡􏿿􂨁􀄢􏿿􂨁􀄣􏿿􂨁􀄤􏿿􂨁􀄥􏿿􂨁􀄦􏿿􂨁􀄧􏿿􂨁􀄨􏿿􂨁􀄩􏿿􂨁􀄪􏿿􂨁􀄫􏿿􂨁􀄬􏿿􂨁􀄭􏿿􂨁􀄮􏿿􂨁􀄯􏿿􂨁􀄰􏿿􂨁􀄱􏿿􂨁􀄲􏿿􂨁􀄳􏿿􂨁􀄴􏿿􂨁􀄵􏿿􂨁􀄶􏿿􂨁􀄷􏿿􂨁􀄸􏿿􂨁􀄹􏿿􂨁􀄺􏿿􂨁􀄻􏿿􂨁􀄼􏿿􂨁􀄽􏿿􂨁􀄾􏿿􂨁􀄿􏿿􂨁􀅀􏿿􂨁􀅁􏿿􂨁􀅂􏿿􂨁􀅃􏿿􂨁􀅄􏿿􂨁􀅅􏿿􂨁􀅆􏿿􂨁􀅇􏿿􂨁􀅈􏿿􂨁􀅉􏿿􂨁􀅊􏿿􂨁􀅋􏿿􂨁􀅌􏿿􂨁􀅍􏿿􂨁􀅎􏿿􂨁􀅏􏿿􂨁􀅐􏿿') === 'あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをんぁぃぅぇぉっゃゅょがぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽ')
    })

    it('カタカナが正しく変換されること', () => {
      assert(ld.deco2text('􂨁􀅑􏿿􂨁􀅒􏿿􂨁􀅓􏿿􂨁􀅔􏿿􂨁􀅕􏿿􂨁􀅖􏿿􂨁􀅗􏿿􂨁􀅘􏿿􂨁􀅙􏿿􂨁􀅚􏿿􂨁􀅛􏿿􂨁􀅜􏿿􂨁􀅝􏿿􂨁􀅞􏿿􂨁􀅟􏿿􂨁􀅠􏿿􂨁􀅡􏿿􂨁􀅢􏿿􂨁􀅣􏿿􂨁􀅤􏿿􂨁􀅥􏿿􂨁􀅦􏿿􂨁􀅧􏿿􂨁􀅨􏿿􂨁􀅩􏿿􂨁􀅪􏿿􂨁􀅫􏿿􂨁􀅬􏿿􂨁􀅭􏿿􂨁􀅮􏿿􂨁􀅯􏿿􂨁􀅰􏿿􂨁􀅱􏿿􂨁􀅲􏿿􂨁􀅳􏿿􂨁􀅴􏿿􂨁􀅵􏿿􂨁􀅶􏿿􂨁􀅷􏿿􂨁􀅸􏿿􂨁􀅹􏿿􂨁􀅺􏿿􂨁􀅻􏿿􂨁􀅼􏿿􂨁􀅽􏿿􂨁􀅾􏿿􂨁􀅿􏿿􂨁􀆀􏿿􂨁􀆁􏿿􂨁􀆂􏿿􂨁􀆃􏿿􂨁􀆄􏿿􂨁􀆅􏿿􂨁􀆆􏿿􂨁􀆇􏿿􂨁􀆈􏿿􂨁􀆉􏿿􂨁􀆊􏿿􂨁􀆋􏿿􂨁􀆌􏿿􂨁􀆍􏿿􂨁􀆎􏿿􂨁􀆏􏿿􂨁􀆐􏿿􂨁􀆑􏿿􂨁􀆒􏿿􂨁􀆓􏿿􂨁􀆔􏿿􂨁􀆕􏿿􂨁􀆖􏿿􂨁􀆗􏿿􂨁􀆘􏿿􂨁􀆙􏿿􂨁􀆚􏿿􂨁􀆛􏿿􂨁􀆜􏿿􂨁􀆝􏿿􂨁􀆞􏿿􂨁􀆟􏿿􂨁􀆠􏿿') === 'アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォッャュョガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポ')
    })

    it('記号が正しく変換されること', () => {
      assert(ld.deco2text('􂨁􀆡􏿿') === 'ー')
    })

    it('コードマップに存在しない文字が変換されないこと', () => {
      assert(ld.deco2text('漢字😆') === '漢字😆')
    })

    it('コードマップに存在する文字・存在しない文字が混合しても正しく変換されること', () => {
      assert(ld.deco2text('􂘁􀄁􏿿😆\r\n􂨁􀄁あ􏿿¥') === 'A😆\r\nあ¥')
    })

    it('空文字でも異常終了しないこと', () => {
      assert(ld.deco2text('') === '')
    })
  })
})
